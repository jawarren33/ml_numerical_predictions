import pandas as pd
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


class LinearRegressionModel:
    def __init__(self):
        self.model = LinearRegression()

    def fit(self, X, y):
        self.model.fit(X, y)

    def predict(self, X):
        return self.model.predict(X)

def test_linear_regression(X_train, y_train, X_test, y_test):
    model = LinearRegressionModel()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse

# Example usage
# Load data into pandas DataFrame
data = pd.read_csv('data.csv')

# Split the data into training and testing sets
train_data = data.sample(frac=0.8, random_state=42)
test_data = data.drop(train_data.index)

# Separate features and target variable
X_train = train_data.drop('target', axis=1)
y_train = train_data['target']
X_test = test_data.drop('target', axis=1)
y_test = test_data['target']

# Feature selection
feature_selector = FeatureSelection(k_features=3)
feature_selector.fit(X_train, y_train)
X_train_selected = feature_selector.transform(X_train)
X_test_selected = feature_selector.transform(X_test)

# Linear regression model
linear_regression = LinearRegressionModel()
linear_regression.fit(X_train_selected, y_train)

# Test the accuracy of linear regression model
mse = test_linear_regression(X_train_selected, y_train, X_test_selected, y_test)
print("Mean Squared Error:", mse)
