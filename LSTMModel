import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler

class LSTMModel:
    def __init__(self, n_units=50, n_features=1):
        self.n_units = n_units
        self.n_features = n_features
        self.model = None

    def build_model(self):
        self.model = tf.keras.models.Sequential()
        self.model.add(tf.keras.layers.LSTM(units=self.n_units, input_shape=(None, self.n_features)))
        self.model.add(tf.keras.layers.Dense(units=1))
        self.model.compile(optimizer='adam', loss='mse')

    def fit(self, X, y, epochs=100, batch_size=32):
        X = np.reshape(X, (X.shape[0], X.shape[1], self.n_features))
        self.build_model()
        self.model.fit(X, y, epochs=epochs, batch_size=batch_size)

    def predict(self, X):
        X = np.reshape(X, (X.shape[0], X.shape[1], self.n_features))
        return self.model.predict(X).flatten()

def test_lstm(X_train, y_train, X_test, y_test):
    model = LSTMModel()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse

# Example usage
# Load the data into a pandas DataFrame
data = pd.read_csv('data.csv')

# Extract the key variable from the data
key_variable = data['key_variable'].values

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(key_variable.reshape(-1, 1))

# Split the data into training and testing sets
train_data = scaled_data[:-12]  # Use all but the last 12 months for training
test_data = scaled_data[-12:]   # Use the last 12 months for testing

# Prepare the training and testing data
X_train, y_train = [], []
for i in range(12, len(train_data)):
    X_train.append(train_data[i-12:i])
    y_train.append(train_data[i])
X_train, y_train = np.array(X_train), np.array(y_train)

X_test, y_test = [], []
for i in range(12, len(test_data)):
    X_test.append(test_data[i-12:i])
    y_test.append(test_data[i])
X_test, y_test = np.array(X_test), np.array(y_test)

# Train and test the LSTM model
lstm = LSTMModel()
mse = test_lstm(X_train, y_train, X_test, y_test)
print("Mean Squared Error:", mse)
