import numpy as np
import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import MinMaxScaler

class GaussianProcessesModel:
    def __init__(self, length_scale=1.0, length_scale_bounds=(1e-2, 1e2)):
        self.length_scale = length_scale
        self.length_scale_bounds = length_scale_bounds
        self.model = None

    def fit(self, X, y):
        kernel = RBF(length_scale=self.length_scale, length_scale_bounds=self.length_scale_bounds)
        self.model = GaussianProcessRegressor(kernel=kernel)
        self.model.fit(X, y)

    def predict(self, X):
        return self.model.predict(X, return_std=False)

def test_gaussian_processes(X_train, y_train, X_test, y_test):
    model = GaussianProcessesModel()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse

# Example usage
# Load the data into a pandas DataFrame
data = pd.read_csv('data.csv')

# Extract the key variable from the data
key_variable = data['key_variable'].values

# Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(key_variable.reshape(-1, 1))

# Split the data into training and testing sets
train_data = scaled_data[:-12]  # Use all but the last 12 months for training
test_data = scaled_data[-12:]   # Use the last 12 months for testing

# Prepare the training and testing data
X_train, y_train = [], []
for i in range(12, len(train_data)):
    X_train.append(train_data[i-12:i])
    y_train.append(train_data[i])
X_train, y_train = np.array(X_train), np.array(y_train)

X_test, y_test = [], []
for i in range(12, len(test_data)):
    X_test.append(test_data[i-12:i])
    y_test.append(test_data[i])
X_test, y_test = np.array(X_test), np.array(y_test)

# Train and test the Gaussian Processes model
gp = GaussianProcessesModel()
mse = test_gaussian_processes(X_train, y_train, X_test, y_test)
print("Mean Squared Error:", mse)
