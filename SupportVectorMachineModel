from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

class SupportVectorMachineModel:
    def __init__(self, kernel='rbf', C=1.0, epsilon=0.1):
        self.kernel = kernel
        self.C = C
        self.epsilon = epsilon
        self.models = []

    def fit(self, X, y):
        for _ in range(len(y[0])):
            model = SVR(kernel=self.kernel, C=self.C, epsilon=self.epsilon)
            model.fit(X, y[:, _])
            self.models.append(model)

    def predict(self, X):
        predictions = []
        for model in self.models:
            predictions.append(model.predict(X))
        return np.array(predictions).T

def test_support_vector_machine(X_train, y_train, X_test, y_test):
    model = SupportVectorMachineModel()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    return mse

# Example usage
# Split the data into training and testing sets
X_train = train_data.drop('target', axis=1)
y_train = train_data['target']
X_test = test_data.drop('target', axis=1)
y_test = test_data['target']

# Train and test the support vector machine model
svm = SupportVectorMachineModel()
svm.fit(X_train, y_train)
mse = test_support_vector_machine(X_train, y_train, X_test, y_test)
print("Mean Squared Error:", mse)
